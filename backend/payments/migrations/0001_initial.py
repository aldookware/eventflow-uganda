# Generated by Django 4.2.7 on 2025-07-21 23:03

import django.core.validators
from django.db import migrations, models
import payments.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DiscountCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=50, unique=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Internal name for the discount", max_length=200
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "is_global",
                    models.BooleanField(
                        default=False, help_text="Applies to all events"
                    ),
                ),
                (
                    "discount_type",
                    models.CharField(
                        choices=[
                            ("percentage", "Percentage"),
                            ("fixed_amount", "Fixed Amount"),
                            ("free_shipping", "Free Service Fee"),
                            ("buy_one_get_one", "Buy One Get One"),
                        ],
                        default="percentage",
                        max_length=20,
                    ),
                ),
                (
                    "discount_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Percentage or fixed amount",
                        max_digits=10,
                    ),
                ),
                (
                    "max_discount_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum discount for percentage types",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "min_order_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Minimum order value",
                        max_digits=10,
                    ),
                ),
                ("currency", models.CharField(default="UGX", max_length=3)),
                (
                    "usage_type",
                    models.CharField(
                        choices=[
                            ("unlimited", "Unlimited"),
                            ("limited", "Limited Uses"),
                            ("single_use", "Single Use Per Customer"),
                            ("one_time", "One Time Use Only"),
                        ],
                        default="unlimited",
                        max_length=20,
                    ),
                ),
                (
                    "usage_limit",
                    models.PositiveIntegerField(
                        blank=True, help_text="Total usage limit", null=True
                    ),
                ),
                (
                    "usage_limit_per_user",
                    models.PositiveIntegerField(
                        default=1, help_text="Usage limit per user"
                    ),
                ),
                ("times_used", models.PositiveIntegerField(default=0)),
                ("valid_from", models.DateTimeField()),
                ("valid_until", models.DateTimeField()),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="Publicly visible or requires code entry",
                    ),
                ),
                ("first_time_buyers_only", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "discount_codes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "transaction_reference",
                    models.CharField(
                        default=payments.models.generate_transaction_reference,
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="UGX", max_length=3)),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("mobile_money", "Mobile Money"),
                            ("bank_card", "Bank Card"),
                            ("bank_transfer", "Bank Transfer"),
                            ("cash", "Cash"),
                            ("paypal", "PayPal"),
                            ("stripe", "Stripe"),
                            ("flutterwave", "Flutterwave"),
                            ("pesapal", "PesaPal"),
                            ("airtel_money", "Airtel Money"),
                            ("mtn_momo", "MTN Mobile Money"),
                            ("agent_banking", "Agent Banking"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "mobile_money_provider",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("mtn", "MTN Mobile Money"),
                            ("airtel", "Airtel Money"),
                            ("ugatel", "UTL Money"),
                            ("africell", "Africell Money"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "payment_gateway",
                    models.CharField(
                        choices=[
                            ("flutterwave", "Flutterwave"),
                            ("pesapal", "PesaPal"),
                            ("stripe", "Stripe"),
                            ("paypal", "PayPal"),
                            ("direct", "Direct Payment"),
                            ("manual", "Manual Payment"),
                        ],
                        default="flutterwave",
                        max_length=50,
                    ),
                ),
                (
                    "gateway_transaction_id",
                    models.CharField(
                        blank=True,
                        help_text="Transaction ID from payment gateway",
                        max_length=200,
                    ),
                ),
                (
                    "gateway_reference",
                    models.CharField(
                        blank=True,
                        help_text="Gateway's reference number",
                        max_length=200,
                    ),
                ),
                (
                    "gateway_response",
                    models.JSONField(
                        blank=True, default=dict, help_text="Raw gateway response"
                    ),
                ),
                (
                    "customer_phone",
                    models.CharField(
                        blank=True,
                        help_text="Phone number used for payment",
                        max_length=20,
                    ),
                ),
                ("customer_email", models.EmailField(blank=True, max_length=254)),
                (
                    "card_last_four",
                    models.CharField(
                        blank=True, help_text="Last 4 digits of card", max_length=4
                    ),
                ),
                (
                    "card_type",
                    models.CharField(
                        blank=True, help_text="Visa, MasterCard, etc.", max_length=20
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("refunded", "Refunded"),
                            ("partially_refunded", "Partially Refunded"),
                            ("disputed", "Disputed"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=30,
                    ),
                ),
                ("payment_date", models.DateTimeField(blank=True, null=True)),
                ("gateway_callback_received", models.BooleanField(default=False)),
                ("callback_data", models.JSONField(blank=True, default=dict)),
                (
                    "gateway_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Fee charged by gateway",
                        max_digits=10,
                    ),
                ),
                (
                    "platform_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Our platform fee",
                        max_digits=10,
                    ),
                ),
                (
                    "net_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount after deducting fees",
                        max_digits=10,
                    ),
                ),
                ("retry_count", models.PositiveIntegerField(default=0)),
                ("max_retries", models.PositiveIntegerField(default=3)),
                ("last_retry_at", models.DateTimeField(blank=True, null=True)),
                ("failure_reason", models.TextField(blank=True)),
                ("failure_code", models.CharField(blank=True, max_length=50)),
                (
                    "is_settled",
                    models.BooleanField(
                        default=False,
                        help_text="Whether payment has been settled to organizer",
                    ),
                ),
                (
                    "settled_amount",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("settlement_date", models.DateTimeField(blank=True, null=True)),
                ("settlement_reference", models.CharField(blank=True, max_length=200)),
                ("requires_verification", models.BooleanField(default=False)),
                (
                    "verification_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("verified", "Verified"),
                            ("failed", "Failed"),
                            ("manual_review", "Manual Review Required"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "risk_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("is_flagged", models.BooleanField(default=False)),
                ("flagged_reason", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("device_fingerprint", models.CharField(blank=True, max_length=200)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("webhook_sent", models.BooleanField(default=False)),
                ("webhook_response", models.JSONField(blank=True, default=dict)),
                ("customer_notified", models.BooleanField(default=False)),
                ("organizer_notified", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When payment request expires", null=True
                    ),
                ),
            ],
            options={
                "db_table": "payments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("attempt_number", models.PositiveIntegerField()),
                ("gateway_used", models.CharField(max_length=50)),
                ("payment_method", models.CharField(max_length=50)),
                (
                    "amount_attempted",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("was_successful", models.BooleanField(default=False)),
                ("error_code", models.CharField(blank=True, max_length=50)),
                ("error_message", models.TextField(blank=True)),
                ("gateway_response", models.JSONField(blank=True, default=dict)),
                ("started_at", models.DateTimeField()),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "duration_seconds",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=8, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "payment_attempts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Refund",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("refund_reference", models.CharField(max_length=20, unique=True)),
                ("refund_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="UGX", max_length=3)),
                (
                    "refund_type",
                    models.CharField(
                        choices=[
                            ("full", "Full Refund"),
                            ("partial", "Partial Refund"),
                            ("service_fee", "Service Fee Refund"),
                            ("cancellation", "Event Cancellation"),
                            ("dispute", "Dispute Resolution"),
                        ],
                        default="full",
                        max_length=20,
                    ),
                ),
                ("reason", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "processing_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "net_refund_amount",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "refund_method",
                    models.CharField(
                        blank=True, help_text="Method used for refund", max_length=50
                    ),
                ),
                (
                    "refund_destination",
                    models.CharField(
                        blank=True,
                        help_text="Account/phone number for refund",
                        max_length=200,
                    ),
                ),
                ("gateway_refund_id", models.CharField(blank=True, max_length=200)),
                ("gateway_response", models.JSONField(blank=True, default=dict)),
                (
                    "gateway_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("requires_approval", models.BooleanField(default=True)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("approval_notes", models.TextField(blank=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("customer_notified", models.BooleanField(default=False)),
                ("organizer_notified", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "refunds",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Settlement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="UGX", max_length=3)),
                ("reference", models.CharField(max_length=200, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("disputed", "Disputed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "settlement_method",
                    models.CharField(
                        choices=[
                            ("bank_transfer", "Bank Transfer"),
                            ("mobile_money", "Mobile Money"),
                            ("paypal", "PayPal"),
                            ("stripe_connect", "Stripe Connect"),
                            ("manual", "Manual Settlement"),
                        ],
                        default="bank_transfer",
                        max_length=30,
                    ),
                ),
                (
                    "settlement_account",
                    models.CharField(
                        blank=True, help_text="Account number or phone", max_length=200
                    ),
                ),
                (
                    "settlement_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "net_settlement_amount",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("gateway_settlement_id", models.CharField(blank=True, max_length=200)),
                ("gateway_response", models.JSONField(blank=True, default=dict)),
                ("settlement_date", models.DateTimeField(blank=True, null=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "settlements",
                "ordering": ["-created_at"],
            },
        ),
    ]
