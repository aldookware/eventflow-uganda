# Generated by Django 4.2.7 on 2025-07-21 23:03

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import tickets.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("events", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "ticket_code",
                    models.CharField(
                        default=tickets.models.generate_ticket_code,
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "purchase_price",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "service_fee_paid",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "tax_paid",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("total_paid", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="UGX", max_length=3)),
                ("seat_number", models.CharField(blank=True, max_length=50)),
                ("row_number", models.CharField(blank=True, max_length=20)),
                ("section", models.CharField(blank=True, max_length=100)),
                (
                    "entry_method",
                    models.CharField(
                        choices=[
                            ("qr_code", "QR Code"),
                            ("barcode", "Barcode"),
                            ("nfc", "NFC"),
                            ("manual", "Manual Check"),
                            ("mobile", "Mobile App"),
                        ],
                        default="qr_code",
                        max_length=20,
                    ),
                ),
                ("qr_code_data", models.TextField(blank=True)),
                ("barcode_data", models.CharField(blank=True, max_length=200)),
                ("nfc_data", models.CharField(blank=True, max_length=200)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("used", "Used"),
                            ("refunded", "Refunded"),
                            ("transferred", "Transferred"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("is_checked_in", models.BooleanField(default=False)),
                ("check_in_time", models.DateTimeField(blank=True, null=True)),
                ("check_in_location", models.CharField(blank=True, max_length=200)),
                ("transfer_count", models.PositiveIntegerField(default=0)),
                ("last_transfer_date", models.DateTimeField(blank=True, null=True)),
                (
                    "transfer_fee_paid",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "validation_code",
                    models.CharField(
                        blank=True, help_text="Additional security code", max_length=100
                    ),
                ),
                ("is_duplicate_protection", models.BooleanField(default=True)),
                (
                    "anti_fraud_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("is_vip", models.BooleanField(default=False)),
                ("is_complimentary", models.BooleanField(default=False)),
                ("special_notes", models.TextField(blank=True)),
                (
                    "holder_name",
                    models.CharField(
                        blank=True,
                        help_text="Name on ticket if different from holder",
                        max_length=200,
                    ),
                ),
                ("holder_email", models.EmailField(blank=True, max_length=254)),
                ("holder_phone", models.CharField(blank=True, max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "tickets",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketAddOn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "addon_type",
                    models.CharField(
                        choices=[
                            ("parking", "Parking"),
                            ("merchandise", "Merchandise"),
                            ("food", "Food & Beverage"),
                            ("vip_package", "VIP Package"),
                            ("meet_greet", "Meet & Greet"),
                            ("photo_package", "Photo Package"),
                            ("premium_seating", "Premium Seating Upgrade"),
                            ("early_entry", "Early Entry"),
                            ("backstage_tour", "Backstage Tour"),
                            ("gift_bag", "Gift Bag"),
                            ("lounge_access", "Lounge Access"),
                            ("fast_track", "Fast Track Entry"),
                        ],
                        max_length=50,
                    ),
                ),
                ("description", models.TextField()),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="UGX", max_length=3)),
                (
                    "quantity_available",
                    models.PositiveIntegerField(
                        blank=True, help_text="Leave blank for unlimited", null=True
                    ),
                ),
                ("quantity_sold", models.PositiveIntegerField(default=0)),
                (
                    "max_per_ticket",
                    models.PositiveIntegerField(
                        default=1, help_text="Maximum quantity per ticket"
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=False, help_text="Required for certain ticket types"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="ticket_addons/"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "ticket_addons",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="TicketAddonPurchase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.PositiveIntegerField(default=1)),
                ("unit_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="UGX", max_length=3)),
                ("is_delivered", models.BooleanField(default=False)),
                ("delivery_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "ticket_addon_purchases",
            },
        ),
        migrations.CreateModel(
            name="TicketTransfer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transfer_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("reason", models.CharField(blank=True, max_length=200)),
                ("is_approved", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "ticket_transfers",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "ticket_type",
                    models.CharField(
                        choices=[
                            ("general", "General Admission"),
                            ("vip", "VIP"),
                            ("premium", "Premium"),
                            ("early_bird", "Early Bird"),
                            ("student", "Student"),
                            ("group", "Group"),
                            ("season", "Season Pass"),
                            ("day_pass", "Day Pass"),
                            ("backstage", "Backstage Pass"),
                            ("meet_greet", "Meet & Greet"),
                            ("table", "Table Booking"),
                            ("standing", "Standing Room"),
                            ("balcony", "Balcony"),
                            ("floor", "Floor"),
                            ("box", "Box Seats"),
                        ],
                        default="general",
                        max_length=50,
                    ),
                ),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="UGX", max_length=3)),
                (
                    "cost_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Cost for organizer",
                        max_digits=10,
                    ),
                ),
                (
                    "service_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "tax_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(help_text="Total tickets available"),
                ),
                ("sold_count", models.PositiveIntegerField(default=0)),
                (
                    "reserved_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Tickets temporarily held"
                    ),
                ),
                (
                    "min_purchase",
                    models.PositiveIntegerField(
                        default=1, help_text="Minimum tickets per order"
                    ),
                ),
                (
                    "max_purchase",
                    models.PositiveIntegerField(
                        default=10, help_text="Maximum tickets per order"
                    ),
                ),
                ("sale_starts", models.DateTimeField()),
                ("sale_ends", models.DateTimeField()),
                ("early_bird_until", models.DateTimeField(blank=True, null=True)),
                (
                    "early_bird_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "venue_section",
                    models.CharField(
                        blank=True,
                        help_text="Specific section in venue",
                        max_length=100,
                    ),
                ),
                ("includes_drink", models.BooleanField(default=False)),
                ("includes_food", models.BooleanField(default=False)),
                ("includes_parking", models.BooleanField(default=False)),
                ("includes_merchandise", models.BooleanField(default=False)),
                (
                    "perks_description",
                    models.TextField(
                        blank=True, help_text="What's included with this ticket"
                    ),
                ),
                ("is_refundable", models.BooleanField(default=True)),
                ("is_transferable", models.BooleanField(default=True)),
                ("refund_deadline", models.DateTimeField(blank=True, null=True)),
                (
                    "transfer_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "sale_status",
                    models.CharField(
                        choices=[
                            ("not_started", "Sale Not Started"),
                            ("on_sale", "On Sale"),
                            ("paused", "Sale Paused"),
                            ("sold_out", "Sold Out"),
                            ("ended", "Sale Ended"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_hidden",
                    models.BooleanField(
                        default=False,
                        help_text="Hide from public but allow direct links",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False, help_text="Requires organizer approval"
                    ),
                ),
                ("age_restriction", models.CharField(blank=True, max_length=20)),
                (
                    "special_requirements",
                    models.TextField(
                        blank=True, help_text="ID requirements, dress code, etc."
                    ),
                ),
                (
                    "access_code",
                    models.CharField(
                        blank=True, help_text="Code required to purchase", max_length=50
                    ),
                ),
                ("sort_order", models.PositiveIntegerField(default=0)),
                (
                    "display_color",
                    models.CharField(
                        default="#007bff",
                        help_text="Hex color for UI display",
                        max_length=7,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ticket_types",
                        to="events.event",
                    ),
                ),
                (
                    "seating_plan",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ticket_types",
                        to="events.seatingplan",
                    ),
                ),
            ],
            options={
                "db_table": "ticket_types",
                "ordering": ["sort_order", "price"],
            },
        ),
    ]
