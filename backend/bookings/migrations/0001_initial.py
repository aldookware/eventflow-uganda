# Generated by Django 4.2.7 on 2025-07-21 23:03

import bookings.models
import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "booking_reference",
                    models.CharField(
                        default=bookings.models.generate_booking_reference,
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "customer_email",
                    models.EmailField(
                        max_length=254,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                ("customer_phone", models.CharField(blank=True, max_length=20)),
                ("customer_first_name", models.CharField(max_length=100)),
                ("customer_last_name", models.CharField(max_length=100)),
                ("billing_address", models.TextField(blank=True)),
                ("billing_city", models.CharField(blank=True, max_length=100)),
                ("billing_country", models.CharField(default="Uganda", max_length=100)),
                ("billing_postal_code", models.CharField(blank=True, max_length=20)),
                (
                    "subtotal",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "service_fee_total",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "tax_total",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "discount_amount",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("total_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="UGX", max_length=3)),
                (
                    "discount_code_used",
                    models.CharField(
                        blank=True,
                        help_text="Store code even if discount is deleted",
                        max_length=100,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("paid", "Paid"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                            ("refunded", "Refunded"),
                            ("partially_refunded", "Partially Refunded"),
                        ],
                        default="pending",
                        max_length=30,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Payment"),
                            ("processing", "Processing Payment"),
                            ("paid", "Payment Successful"),
                            ("failed", "Payment Failed"),
                            ("refunded", "Refunded"),
                            ("partially_refunded", "Partially Refunded"),
                        ],
                        default="pending",
                        max_length=30,
                    ),
                ),
                (
                    "booking_channel",
                    models.CharField(
                        choices=[
                            ("web", "Website"),
                            ("mobile_app", "Mobile App"),
                            ("admin", "Admin Panel"),
                            ("api", "API"),
                            ("phone", "Phone"),
                            ("walk_in", "Walk-in"),
                            ("partner", "Partner"),
                        ],
                        default="web",
                        max_length=20,
                    ),
                ),
                (
                    "booking_expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When unpaid booking expires", null=True
                    ),
                ),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("cancellation_reason", models.TextField(blank=True)),
                (
                    "special_requests",
                    models.TextField(
                        blank=True,
                        help_text="Customer requests (dietary, accessibility, etc.)",
                    ),
                ),
                (
                    "internal_notes",
                    models.TextField(
                        blank=True, help_text="Internal notes for organizers"
                    ),
                ),
                (
                    "customer_notes",
                    models.TextField(
                        blank=True, help_text="Additional notes from customer"
                    ),
                ),
                (
                    "referral_source",
                    models.CharField(
                        blank=True,
                        help_text="How customer found the event",
                        max_length=200,
                    ),
                ),
                ("utm_source", models.CharField(blank=True, max_length=100)),
                ("utm_medium", models.CharField(blank=True, max_length=100)),
                ("utm_campaign", models.CharField(blank=True, max_length=100)),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("electronic", "Electronic Tickets"),
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("mobile_app", "Mobile App"),
                            ("print_at_home", "Print at Home"),
                            ("will_call", "Will Call"),
                            ("postal", "Postal Mail"),
                        ],
                        default="electronic",
                        max_length=50,
                    ),
                ),
                ("is_group_booking", models.BooleanField(default=False)),
                ("group_size", models.PositiveIntegerField(default=1)),
                ("group_leader_name", models.CharField(blank=True, max_length=200)),
                ("group_leader_contact", models.CharField(blank=True, max_length=100)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("user_agent", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("device_type", models.CharField(blank=True, max_length=50)),
                (
                    "risk_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("is_flagged", models.BooleanField(default=False)),
                ("flagged_reason", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "bookings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BookingGuest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                (
                    "age_category",
                    models.CharField(
                        choices=[
                            ("adult", "Adult"),
                            ("child", "Child"),
                            ("infant", "Infant"),
                            ("senior", "Senior"),
                        ],
                        default="adult",
                        max_length=20,
                    ),
                ),
                ("dietary_requirements", models.TextField(blank=True)),
                ("accessibility_needs", models.TextField(blank=True)),
                ("special_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "booking_guests",
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="BookingItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price per ticket at time of booking",
                        max_digits=10,
                    ),
                ),
                (
                    "service_fee_per_ticket",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "tax_per_ticket",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "total_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total for this item (quantity * unit_price)",
                        max_digits=10,
                    ),
                ),
                (
                    "service_fee_total",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "tax_total",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("currency", models.CharField(default="UGX", max_length=3)),
                (
                    "seating_preference",
                    models.CharField(
                        blank=True,
                        help_text="Customer seating requests",
                        max_length=200,
                    ),
                ),
                (
                    "assigned_seats",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of assigned seat information",
                    ),
                ),
                (
                    "special_requirements",
                    models.TextField(
                        blank=True, help_text="Special needs for these tickets"
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        blank=True,
                        help_text="Override booking delivery method",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "booking_items",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="BookingNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("note", models.TextField()),
                (
                    "is_internal",
                    models.BooleanField(
                        default=True, help_text="Internal note not visible to customer"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "booking_notes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BookingStatusHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("previous_status", models.CharField(max_length=30)),
                ("new_status", models.CharField(max_length=30)),
                ("reason", models.TextField(blank=True)),
                (
                    "automated",
                    models.BooleanField(
                        default=False, help_text="Changed by system vs manual"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "booking_status_history",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WaitlistEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("quantity_requested", models.PositiveIntegerField(default=1)),
                (
                    "max_price_willing",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum price willing to pay",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("notify_by_email", models.BooleanField(default=True)),
                ("notify_by_sms", models.BooleanField(default=False)),
                ("notify_by_push", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "position",
                    models.PositiveIntegerField(help_text="Position in waitlist"),
                ),
                ("notified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When notification expires", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "waitlist_entries",
                "ordering": ["position", "created_at"],
            },
        ),
    ]
