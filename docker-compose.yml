version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eventflow_postgres
    environment:
      POSTGRES_DB: eventflow_db
      POSTGRES_USER: eventflow_user
      POSTGRES_PASSWORD: eventflow_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eventflow_user -d eventflow_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: eventflow_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eventflow_backend
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-docker-dev-key-change-in-production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=eventflow_db
      - DB_USER=eventflow_user
      - DB_PASSWORD=eventflow_pass
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TIMEZONE=Africa/Kampala
      - LANGUAGE_CODE=en
      - CURRENCY_CODE=UGX
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_media:/app/media
      - backend_static:/app/staticfiles
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/events/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eventflow_celery
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-docker-dev-key-change-in-production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=eventflow_db
      - DB_USER=eventflow_user
      - DB_PASSWORD=eventflow_pass
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TIMEZONE=Africa/Kampala
    volumes:
      - ./backend:/app
      - backend_media:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: celery -A eventflow worker --loglevel=info

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eventflow_celery_beat
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-docker-dev-key-change-in-production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=eventflow_db
      - DB_USER=eventflow_user
      - DB_PASSWORD=eventflow_pass
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TIMEZONE=Africa/Kampala
    volumes:
      - ./backend:/app
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: celery -A eventflow beat --loglevel=info

  # Next.js Admin Dashboard
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: eventflow_admin
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
    ports:
      - "3000:3000"
    volumes:
      - ./admin:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    command: npm run dev

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: eventflow_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - backend_static:/var/www/static:ro
      - backend_media:/var/www/media:ro
    depends_on:
      - backend
      - admin
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_media:
    driver: local
  backend_static:
    driver: local
  celery_beat_data:
    driver: local

networks:
  default:
    driver: bridge